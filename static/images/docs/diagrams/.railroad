# Add new syntax to this file to generate railroad diagrams
# Run `scripts/railroad.py`.
# Link using `![Diagram](/images/docs/diagrams/.railroad/diagramName.svg)`
# Will take file name from first line
# Then syntax from following lines

alterUser
  ::= 'ALTER' 'USER' userName ( 'ENABLE' | 'DISABLE' | 'WITH' ('NO' 'PASSWORD' | 'PASSWORD' password )
    | 'CREATE' 'TOKEN' 'TYPE' ( 'JWK' | 'REST' 'WITH' 'TTL' 'timeUnit' ('REFRESH')? )
    | 'DROP' 'TOKEN' 'TYPE' ( 'JWK' | 'REST' ('token')? ) )

alterServiceAccount
  ::= 'ALTER' 'SERVICE' 'ACCOUNT' serviceAccountName ( 'ENABLE' | 'DISABLE' | 'WITH' ('NO' 'PASSWORD' | 'PASSWORD' password )
    | 'CREATE' 'TOKEN' 'TYPE' ( 'JWK' | 'REST' 'WITH' 'TTL' 'timeUnit' ('REFRESH')? )
    | 'DROP' 'TOKEN' 'TYPE' ( 'JWK' | 'REST' ('token')? ) )

addUser
  ::= 'ADD' 'USER' userName TO groupName ( ',' groupName )*

assumeServiceAccount
  ::= 'ASSUME' 'SERVICE' 'ACCOUNT' serviceAccount

exitServiceAccount
  ::= 'EXIT' 'SERVICE' 'ACCOUNT' serviceAccount

cancelQuery
::= 'CANCEL' 'QUERY' queryId

createTableDef
::= 'CREATE' (
        ('ATOMIC')?
        |
        ('BATCH' number ('o3MaxLag' numberWithUnit)?) )
    'TABLE' ('IF' 'NOT' 'EXISTS')? tableName
  (
  (
  '(' columnName typeDef (',' columnName typeDef)* ')'
  ) | (
  'AS' '(' selectSql ')'  (',' castDef)* (',' indexDef)*
  )
  ) (
    ('TIMESTAMP' '(' columnRef ')' )
    (
      'PARTITION' 'BY' ('NONE' ('BYPASS' 'WAL')? | ('YEAR' | 'MONTH' | 'DAY' | 'HOUR')('WAL' | 'BYPASS' 'WAL')?)
      ('TTL' n ('HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS'))?
    )?
  )?
 ('WITH' tableParameter)?
 (tableTargetVolumeDef)?
 ('OWNED' 'BY' ownerName)?

timestamp
  ::= 'CREATE' someCreateTableStatement 'timestamp' '(' columnName ')'

createTableLike
  ::= 'CREATE' 'TABLE' ( '(' 'LIKE' sourceTableName ')' )? ';'

createUser
  ::= 'CREATE' 'USER' ('IF' 'NOT' 'EXISTS')? userName ( 'WITH' ( 'NO' 'PASSWORD' | 'PASSWORD' password ) )?

createGroup
  ::= 'CREATE' 'GROUP' ('IF' 'NOT' 'EXISTS')? groupName

createServiceAccount
  ::= 'CREATE' 'SERVICE' 'ACCOUNT' ('IF' 'NOT' 'EXISTS')? accountName ('OWNED' 'BY' ownerName)?

alterTable
  ::= 'ALTER' 'TABLE' tableName

alterTableAddIndex
  ::= 'ALTER' 'TABLE' tableName 'ALTER' 'COLUMN' columnName 'ADD' 'INDEX'

declare
  ::= 'DECLARE' '@variable' ':=' expression ( ',' '@variable' ':=' expression )* withExpr? selectExpr

alterTableAddColumn
  ::= 'ADD' 'COLUMN' ('IF' 'NOT' 'EXISTS')? columnName typeDef (',' columnName typeDef)*  ('OWNED' 'BY' ownerName)?

dropGroup
  ::= 'DROP' 'GROUP' ('IF' 'EXISTS')? groupName

dropServiceAccount
  ::= 'DROP' 'SERVICE' 'ACCOUNT' ('IF' 'EXISTS')? accountName

dropTable
  ::= 'DROP' ('TABLE' ('IF' 'EXISTS')? tableName |'ALL' 'TABLES')

dropUser
  ::= 'DROP' 'USER' ('IF' 'EXISTS')? userName

castDef
  ::= 'cast' '(' columnRef 'as' typeDef ')'

columnTypeDef
  ::= (
  'boolean' | 'byte' | 'short' | 'char' | 'int' | 'float' |
  ('symbol' (('CAPACITY' distinctValueEstimate) ('CACHE' | 'NOCACHE')?)? inlineIndexDef?) |
  'varchar' | 'string' | 'long' | 'date' | 'timestamp' | 'double' | 'binary' | 'long256' | 'geohash(<size>)'
  )

indexDef
  ::='INDEX' '(' columnRef ('CAPACITY' valueBlockSize)?')'

tableTargetVolumeDef
  ::= ','? 'IN' 'VOLUME' "'"? secondaryVolumeAlias "'"?

insert
  ::= 'INSERT' (('ATOMIC')? | ('BATCH' number ('o3MaxLag' numberWithUnit)?) )
  'INTO' tableName ( ( '(' columnName (',' columnName)*) ')')?
  ( 'VALUES' ( ( '(' value ( ',' value)* ')' ) (',' '(' value ( ',' value)* ')' )* ) | 'SELECT' queryDef mainQuery )
  ';'

withAsInsert
  ::= ( 'WITH' subQueryName 'AS' '(' subQuery ')' ( ',' subQueryName 'AS' '(' subQuery ')' )* )?
  'INSERT' (('ATOMIC')? | ('BATCH' number ('o3MaxLag' numberWithUnit)?) ) 'INTO' tableName 'SELECT' queryDef subQueryName ';'

checkpoint
  ::= 'CHECKPOINT' ( 'CREATE' | 'RELEASE' ) ';'

case
  ::= 'CASE' ('WHEN' condition 'THEN' value)* ( | 'ELSE' value ) 'END'

copy
  ::= 'COPY' (id 'CANCEL' | tableName 'FROM' fileName (| 'WITH' (| 'HEADER' (true|false) |'TIMESTAMP' columnName | 'DELIMITER' delimiter | 'FORMAT' format | |'PARTITION BY' ('NONE'|'YEAR'|'MONTH'|'DAY'|'HOUR') | 'ON ERROR' ('SKIP_ROW'|'SKIP_COLUMN'|'ABORT')) ))

select
  ::= ('SELECT' ( (column | expression | function) ('AS' alias | alias)? (',' (column | expression | function) ('AS' alias | alias)? )* ) 'FROM')? ( table | '(' query ')') ('AS' alias | alias)?

createTableWithMaxRowParam
  ::= 'WITH' 'maxUncommittedRows' '=' rowCount

dynamicTimestamp
  ::= 'SELECT' someSelectStatement 'timestamp' '(' columnName ')'

sampleBy
  ::= someSelectStatement... 'SAMPLE' 'BY' n ( 'T' | 's' | 'm' | 'h' | 'd' | 'M' | )

fromTo
  ::= someSampleBySelectQuery... ( 'FROM' lowerBound 'TO' upperBound | 'FROM' lowerBound | 'TO' upperBound )

alignToCalTimeZone
  ::= 'ALIGN' 'TO' ( 'FIRST' 'OBSERVATION' | 'CALENDAR' ( 'TIME' 'ZONE' timezone | 'WITH' 'OFFSET' offset )? )

distinct
  ::= 'SELECT' 'DISTINCT' ( columnName (',' columnName)* ) 'FROM' tableName

latestOn
  ::= 'SELECT' ( columnName (',' columnName)* ) 'FROM' tableName 'LATEST' 'ON' '(' columnName ')' 'PARTITION' 'BY' ( columnName (',' columnName)* )

limit
  ::= 'SELECT' someSelectStatement 'LIMIT' ( numberOfRecords | (lowerBound ',' upperBound) ) ';'

fill
  ::= someSampleBySelectQuery 'FILL' ( ( 'NONE' | 'NULL' | 'PREV' | 'LINEAR' | 'x' ) ',' )*

orderBy
  ::= someSelectQuery 'ORDER' 'BY' ( columnName (ASC | DESC) ? (',' columnName (asc | desc) ?)* )

where
  ::= (selectStatement | '(' query ')' ) 'WHERE' boolean_expr

whereTimestampIntervalSearch
  ::= 'WHERE' timestampColumn 'IN' "'" timestamp ';' modifier ( s | m | h | d | M | y ) ';' ( interval ( s | m | h | d | M | y ) ';' repetition )? "'"

whereExactString
  ::= 'WHERE' column '=' "'" string "'"

whereStringNotMatch
  ::= 'WHERE' column '!=' "'" string "'"

whereRegexMatch
  ::= 'WHERE' column '~' regex

whereRegexNotMatch
  ::= 'WHERE' '~=' '(' column ';' regex ')'

whereListIn
  ::= 'WHERE' 'NOT'? columnName 'in' '(' string (',' string)* ')'

whereNumericValue
  ::= 'WHERE' column ('=' | '!=' | '>' | '>=' | '<' | '<=') value

whereComplex
  ::= 'WHERE' ('('? ( 'AND' | 'OR' | 'NOT' )? boolean ')'?)*

whereBoolean
  ::= 'WHERE' 'NOT'? columnName

whereTimestampExact
  ::= 'WHERE' column '=' timestamp

whereTimestampPartial
  ::= 'WHERE' timestampColumn 'IN' ( 'yyyy' | 'yyyy-MM' | 'YYYY-MM-dd' | 'yyyy-MM-ddThh' | 'yyyy-MM-ddThh:mm' | 'yyyy-MM-ddThh:mm:ss' )

unionExceptIntersect
  ::= query_1 ('UNION' | 'EXCEPT' | 'INTERSECT') 'ALL'? query_2

renameTable
  ::= 'RENAME' 'TABLE' oldName 'TO' newName

cast
  ::= 'CAST' '(' expression 'AS' type ')'

joinOverview
  ::= selectClause joinStatement ( 'WHERE' whereClause )?

InnerLeftJoin
  ::= ( 'INNER' | 'LEFT' )? 'JOIN' ( table | '(' sub-query ')' ) ( 'ON' ( ( column operator anotherColumn ) ( 'AND' ( column operator anotherColumn ) )* | '(' column ( ',' column )* ')' ) )?

AsofLtSpliceJoin
  ::= ( 'ASOF' | 'LT' ) 'JOIN' ( table | '(' sub-query ')' ) ( 'ON' ( column '=' anotherColumn ( 'AND' column '=' anotherColumn )* | '(' column ( ',' column )* ')' ) )? ( 'TOLERANCE' interval_literal )?
    | 'SPLICE' 'JOIN' ( table | '(' sub-query ')' ) ( 'ON' ( column '=' anotherColumn ( 'AND' column '=' anotherColumn )* | '(' column ( ',' column )* ')' ) )?

AsofJoin
  ::= 'ASOF' 'JOIN' ( table | '(' sub-query ')' ) ( 'ON' ( column '=' anotherColumn ( 'AND' column '=' anotherColumn )* | '(' column ( ',' column )* ')' ) )? ( 'TOLERANCE' interval_literal )?

crossJoin
  ::= 'CROSS' 'JOIN' ( table | '(' sub-query ')' )

grant
  ::= 'GRANT' permission ( ',' permission )* ( 'ON' ( 'ALL' 'TABLES' | ( tableName ( '(' columnName ( ',' columnName )* ')' )? ( ',' tableName ( '(' columnName ( ',' columnName )* ')' )? )* ) ) )?
  'TO' entityName ( 'WITH' 'GRANT' 'OPTION' )? ( 'WITH' 'VERIFICATION' )?

revoke
  ::= 'REVOKE' permission ( ',' permission )* ( 'ON' tableName ( '(' 'columnName' ( ',' columnName )* ')' )? ( ',' tableName ( '(' 'columnName' ( ',' columnName )* ')' )? )* )?
  'FROM' entityName

grantAssumeServiceAccount
  ::= 'GRANT' 'ASSUME' 'SERVICE' 'ACCOUNT' serviceAccount 'TO' entityName ( 'WITH' 'GRANT' 'OPTION' )?

revokeAssumeServiceAccount
  ::= 'REVOKE' 'ASSUME' 'SERVICE' 'ACCOUNT' serviceAccount 'FROM' entityName

groupBy
  ::= 'SELECT' ((column ( ',' column )* ) ' ,' ( aggregation ( ',' aggregation )* )) 'FROM' table ('GROUP BY' (column ( ',' column )* ))?

with
  ::= 'WITH' ( subQueryName 'AS' '(' subQuery ')' ( ',' subQueryName 'AS' '(' subQuery ')' )*) mainQuery

dropIndex
  ::= 'ALTER' 'COLUMN' columnName 'DROP' 'INDEX'

alterTableNoCache
  ::= 'ALTER' 'TABLE' tableName 'ALTER' 'COLUMN' columnName ( 'NOCACHE' | 'CACHE' )

alterTableDropColumn
  ::= 'DROP' 'COLUMN' columnName (',' columnName)* ';'

alterColumnType
  ::= 'ALTER' 'TABLE' tableName 'ALTER' 'COLUMN' columnName 'TYPE' typeDef

alterTableSymbolCapacity
  ::= 'ALTER' 'TABLE' tableName 'ALTER' 'COLUMN' columnName 'SYMBOL' 'CAPACITY' capacity

alterTableDropPartition
  ::= 'DROP' 'PARTITION' 'LIST' partitionName (',' partitionName)*

removeUser
  ::= 'REMOVE' 'USER' userName 'FROM' groupName ( ',' groupName )*

reindexTable
  ::= 'REINDEX' 'TABLE' tableName ('COLUMN' columnName)* ('PARTITION' partitionName)* 'LOCK' 'EXCLUSIVE'

alterTableRenameColumn
  ::= 'RENAME' 'COLUMN' columnName 'TO' newColumnName

alterTableAttachPartition
  ::= 'ALTER' 'TABLE' tableName 'ATTACH' 'PARTITION' 'LIST' partitionName (',' partitionName)*

alterTableDetachPartition
  ::= 'ALTER' 'TABLE' tableName 'DETACH' 'PARTITION' 'LIST' partitionName (',' partitionName)*
   | 'ALTER' 'TABLE' tableName 'DETACH' 'PARTITION' 'WHERE' timestampColumn ( '=' | '>' | '<' | '>=' | '<=' ) "'" timestamp "'"
   | 'ALTER' 'TABLE' tableName 'DETACH' 'PARTITION' 'WHERE' timestampColumn 'IN' '(' timestamp (',' timestamp)* ')'

alterTableSquashPartitions
  ::= 'SQUASH' 'PARTITIONS' tableName ';'

alterTableSetParam
  ::= 'SET' 'PARAM' ( 'maxUncommittedRows' '=' n)

alterTableSetParamCommitLag
  ::= 'SET' 'PARAM' ( 'maxUncommittedRows' '=' n | 'commitLag' '=' n ( 'us' | 's' | 'm' | 'h' | 'd' ))

vacuumTable
  ::= 'VACUUM' 'TABLE' tableName

resumeWal
  ::= 'RESUME' 'WAL' ( 'FROM' 'TRANSACTION' sequencerTxn | 'FROM' 'TXN' sequencerTxn )?

setType
  ::= 'SET' 'TYPE' ( 'BYPASS' )? 'WAL'

setTtl
  ::= 'SET' 'TTL' n ('HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS')

update
  ::= UPDATE 'tableName' SET columnName '=' 'expression' ( ',' columnName '=' 'expression' )*
  (FROM 'joinTable1' (JOIN 'joinTable2' ON 'joinCondition2')? )? (WHERE 'filter')?

show
  ::= 'SHOW' ( ('TABLES'|('COLUMNS'|'PARTITIONS') 'FROM' tableName )
  | 'CREATE' 'TABLE' tableName
  | 'USER' userName?
  | 'USERS'
  | 'GROUPS' userName?
  | 'SERVICE' 'ACCOUNT' accountName?
  | 'SERVICE' 'ACCOUNTS' userName?
  | 'PERMISSIONS' entityName?
  | 'SERVER_VERSION'
  | 'PARAMETERS'
  )

snapshot
  ::= 'SNAPSHOT' ('PREPARE' | 'COMPLETE') ';'

truncateTable
  ::= 'TRUNCATE TABLE' ('IF' 'EXISTS')? tableName ';'

explain
  ::= 'EXPLAIN' statement

disableDedup
  ::= 'ALTER' 'TABLE' tableName 'DEDUP' 'DISABLE'

enableDedup
  ::= 'ALTER' 'TABLE' tableName 'DEDUP' 'ENABLE' 'UPSERT' 'KEYS' '(' (column ( ',' column )* ) ')'

createMatViewDef
  ::= 'CREATE' 'MATERIALIZED' 'VIEW' ('IF' 'NOT' 'EXISTS')? viewName
  ('WITH BASE' baseTableName)?
  (
    'REFRESH' ((('IMMEDIATE' | 'MANUAL') ('DEFERRED')?) | ('EVERY' interval ('DEFERRED')? ('START' timestamp)? ('TIME' 'ZONE' timezone)?) )?
    ('PERIOD' '(' 'LENGTH' length ('TIME' 'ZONE' timezone)? ('DELAY' delay)? ')')?
  )?
  'AS'
  ('(')?
  (query)
  (')')?
  ('TIMESTAMP' '(' columnRef ')')?
  (
    'PARTITION' 'BY' ('YEAR' | 'MONTH' | 'DAY' | 'HOUR')
    ('TTL' n ('HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS'))?
  )?
  (viewTargetVolumeDef)?
  ('OWNED' 'BY' ownerName)?

createMatViewCompactDef
  ::= 'CREATE' 'MATERIALIZED' 'VIEW' ('IF' 'NOT' 'EXISTS')? viewName
  'AS'
  (query)

alterMatView
  ::= 'ALTER' 'MATERIALIZED' 'VIEW' viewName

alterMatViewAddIndex
  ::= 'ALTER' 'MATERIALIZED' 'VIEW' viewName 'ALTER' 'COLUMN' columnName 'ADD' 'INDEX' ('CAPACITY' capacity)?

alterMatViewSymbolCapacity
  ::= 'ALTER' 'MATERIALIZED' 'VIEW' viewName 'ALTER' 'COLUMN' columnName 'SYMBOL' 'CAPACITY' capacity

alterMatViewSetTtl
  ::= 'ALTER' 'MATERIALIZED' 'VIEW' viewName 'SET' 'TTL' n ('HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS')

alterMatViewSetRefreshLimit
  ::= 'ALTER' 'MATERIALIZED' 'VIEW' viewName 'SET' 'REFRESH' 'LIMIT' n ('HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS')

alterMatViewSetRefresh
::= 'ALTER' 'MATERIALIZED' 'VIEW' viewName 'SET' 'REFRESH'
  (('IMMEDIATE' | 'MANUAL') | ('EVERY' interval ('DEFERRED')? ('START' timestamp)? ('TIME' 'ZONE' timezone)?) )?
  ('PERIOD' '(' 'LENGTH' length ('TIME' 'ZONE' timezone)? ('DELAY' delay)? ')')?

refreshMatView
  ::= 'REFRESH' 'MATERIALIZED' 'VIEW' viewName ('FULL' | 'INCREMENTAL' | ('INTERVAL' 'FROM' fromTimestamp 'TO' toTimestamp))

dropMatView
  ::= 'DROP' 'MATERIALIZED' 'VIEW' viewName
