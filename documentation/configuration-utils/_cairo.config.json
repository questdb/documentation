{
  "config.reload.enabled": {
    "default": "true",
    "description": "When `false`, disables reload_config() SQL function."
  },
  "query.timeout.sec": {
    "default": "60",
    "description": "A global timeout (in seconds) for long-running queries. Timeout for each query can override the default by setting HTTP header [`Statement-Timeout`](/docs/reference/api/rest/#headers) or Postgres [`options`](/docs/reference/api/postgres/#list-of-supported-connection-properties)."
  },
  "cairo.max.uncommitted.rows": {
    "default": "500000",
    "description": "Maximum number of uncommitted rows per table, when the number of pending rows reaches this parameter on a table, a commit will be issued."
  },
  "cairo.o3.max.lag": {
    "default": "10 minutes",
    "description": "The maximum size of in-memory buffer in milliseconds. The buffer is allocated dynamically through analyzing the shape of the incoming data, and `o3MaxLag` is the upper limit."
  },
  "cairo.o3.min.lag": {
    "default": "1 second",
    "description": "The minimum size of in-memory buffer in milliseconds. The buffer is allocated dynamically through analyzing the shape of the incoming data, and `o3MinLag` is the lower limit."
  },
  "cairo.sql.backup.root": {
    "default": "null",
    "description": "Output root directory for backups."
  },
  "cairo.sql.backup.dir.datetime.format": {
    "default": "null",
    "description": "Date format for backup directory."
  },
  "cairo.sql.backup.dir.tmp.name": {
    "default": "tmp",
    "description": "Name of tmp directory used during backup."
  },
  "cairo.sql.backup.mkdir.mode": {
    "default": "509",
    "description": "Permission used when creating backup directories."
  },
  "cairo.snapshot.instance.id": {
    "default": "empty string",
    "description": "Instance id to be included into disk snapshots."
  },
  "cairo.snapshot.recovery.enabled": {
    "default": "true",
    "description": "When `false`, disables snapshot recovery on database start."
  },
  "cairo.root": {
    "default": "db",
    "description": "Directory for storing db tables and metadata. This directory is inside the server root directory provided at startup."
  },
  "cairo.commit.mode": {
    "default": "nosync",
    "description": "How changes to table are flushed to disk upon commit. Choices: `nosync`, `async` (flush call schedules update, returns immediately), `sync` (waits for flush on the appended column files to complete)."
  },
  "cairo.rnd.memory.max.pages": {
    "default": "128",
    "description": "Sets the max number of pages for memory used by `rnd_` functions. Supports `rnd_str()` and `rnd_symbol()`."
  },
  "cairo.rnd.memory.page.size": {
    "default": "8K",
    "description": "Sets the memory page size used by `rnd_` functions. Supports `rnd_str()` and `rnd_symbol()`."
  },
  "cairo.create.as.select.retry.count": {
    "default": "5",
    "description": "Number of types table creation or insertion will be attempted."
  },
  "cairo.default.map.type": {
    "default": "fast",
    "description": "Type of map used. Options: `fast` (speed at the expense of storage), `compact`."
  },
  "cairo.default.symbol.cache.flag": {
    "default": "true",
    "description": "When `true`, symbol values will be cached on Java heap instead of being looked up in the database files."
  },
  "cairo.default.symbol.capacity": {
    "default": "256",
    "description": "Specifies approximate capacity for `SYMBOL` columns. It should be equal to number of unique symbol values stored in the table and getting this value badly wrong will cause performance degradation. Must be power of 2."
  },
  "cairo.file.operation.retry.count": {
    "default": "30",
    "description": "Number of attempts to open files."
  },
  "cairo.idle.check.interval": {
    "default": "300000",
    "description": "Frequency of writer maintenance job in milliseconds."
  },
  "cairo.inactive.reader.ttl": {
    "default": "120000",
    "description": "TTL (Time-To-Live) to close inactive readers in milliseconds."
  },
  "cairo.wal.inactive.writer.ttl": {
    "default": "120000",
    "description": "TTL (Time-To-Live) to close inactive WAL writers in milliseconds."
  },
  "cairo.inactive.writer.ttl": {
    "default": "600000",
    "description": "TTL (Time-To-Live) to close inactive writers in milliseconds."
  },
  "cairo.index.value.block.size": {
    "default": "256",
    "description": "Approximation of number of rows for a single index key, must be power of 2."
  },
  "cairo.max.swap.file.count": {
    "default": "30",
    "description": "Number of attempts to open swap files."
  },
  "cairo.mkdir.mode": {
    "default": "509",
    "description": "File permission mode for new directories."
  },
  "cairo.parallel.index.threshold": {
    "default": "100000",
    "description": "Minimum number of rows before allowing use of parallel indexation."
  },
  "cairo.reader.pool.max.segments": {
    "default": "10",
    "description": "Number of segments in the table reader pool. Each segment holds up to 32 readers."
  },
  "cairo.wal.writer.pool.max.segments": {
    "default": "10",
    "description": "Number of segments in the WAL writer pool. Each segment holds up to 32 writers."
  },
  "cairo.spin.lock.timeout": {
    "default": "1000",
    "description": "Timeout when attempting to get BitmapIndexReaders in millisecond."
  },
  "cairo.character.store.capacity": {
    "default": "1024",
    "description": "Size of the CharacterStore."
  },
  "cairo.character.store.sequence.pool.capacity": {
    "default": "64",
    "description": "Size of the CharacterSequence pool."
  },
  "cairo.column.pool.capacity": {
    "default": "4096",
    "description": "Size of the Column pool in the SqlCompiler."
  },
  "cairo.compact.map.load.factor": {
    "default": "0.7",
    "description": "Load factor for CompactMaps."
  },
  "cairo.expression.pool.capacity": {
    "default": "8192",
    "description": "Size of the ExpressionNode pool in SqlCompiler."
  },
  "cairo.fast.map.load.factor": {
    "default": "0.5",
    "description": "Load factor for all FastMaps."
  },
  "cairo.sql.join.context.pool.capacity": {
    "default": "64",
    "description": "Size of the JoinContext pool in SqlCompiler."
  },
  "cairo.lexer.pool.capacity": {
    "default": "2048",
    "description": "Size of FloatingSequence pool in GenericLexer."
  },
  "cairo.sql.map.key.capacity": {
    "default": "2M",
    "description": "Key capacity in FastMap and CompactMap."
  },
  "cairo.sql.map.max.resizes": {
    "default": "2^31",
    "description": "Number of map resizes in FastMap and CompactMap before a resource limit exception is thrown, each resize doubles the previous size."
  },
  "cairo.sql.map.page.size": {
    "default": "4m",
    "description": "Memory page size for FastMap and CompactMap."
  },
  "cairo.sql.map.max.pages": {
    "default": "2^31",
    "description": "Memory max pages for CompactMap."
  },
  "cairo.model.pool.capacity": {
    "default": "1024",
    "description": "Size of the QueryModel pool in the SqlCompiler."
  },
  "cairo.sql.sort.key.page.size": {
    "default": "4M",
    "description": "Memory page size for storing keys in LongTreeChain."
  },
  "cairo.sql.sort.key.max.pages": {
    "default": "2^31",
    "description": "Max number of pages for storing keys in LongTreeChain before a resource limit exception is thrown."
  },
  "cairo.sql.sort.light.value.page.size": {
    "default": "1048576",
    "description": "Memory page size for storing values in LongTreeChain."
  },
  "cairo.sql.sort.light.value.max.pages": {
    "default": "2^31",
    "description": "Max pages for storing values in LongTreeChain."
  },
  "cairo.sql.hash.join.value.page.size": {
    "default": "16777216",
    "description": "Memory page size of the slave chain in full hash joins."
  },
  "cairo.sql.hash.join.value.max.pages": {
    "default": "2^31",
    "description": "Max pages of the slave chain in full hash joins."
  },
  "cairo.sql.latest.by.row.count": {
    "default": "1000",
    "description": "Number of rows for LATEST BY."
  },
  "cairo.sql.hash.join.light.value.page.size": {
    "default": "1048576",
    "description": "Memory page size of the slave chain in light hash joins."
  },
  "cairo.sql.hash.join.light.value.max.pages": {
    "default": "2^31",
    "description": "Max pages of the slave chain in light hash joins."
  },
  "cairo.sql.sort.value.page.size": {
    "default": "16777216",
    "description": "Memory page size of file storing values in SortedRecordCursorFactory."
  },
  "cairo.sql.sort.value.max.pages": {
    "default": "2^31",
    "description": "Max pages of file storing values in SortedRecordCursorFactory."
  },
  "cairo.work.steal.timeout.nanos": {
    "default": "10000",
    "description": "Latch await timeout in nanos for stealing indexing work from other threads."
  },
  "cairo.parallel.indexing.enabled": {
    "default": "true",
    "description": "Allows parallel indexation. Works in conjunction with cairo.parallel.index.threshold."
  },
  "cairo.sql.join.metadata.page.size": {
    "default": "16384",
    "description": "Memory page size for JoinMetadata file."
  },
  "cairo.sql.join.metadata.max.resizes": {
    "default": "2^31",
    "description": "Number of map resizes in JoinMetadata before a resource limit exception is thrown, each resize doubles the previous size."
  },
  "cairo.sql.analytic.column.pool.capacity": {
    "default": "64",
    "description": "Size of AnalyticColumn pool in SqlParser."
  },
  "cairo.sql.create.table.model.batch.size": {
    "default": "1000000",
    "description": "Batch size for non-atomic CREATE AS SELECT statements."
  },
  "cairo.sql.column.cast.model.pool.capacity": {
    "default": "16",
    "description": "Size of CreateTableModel pool in SqlParser."
  },
  "cairo.sql.rename.table.model.pool.capacity": {
    "default": "16",
    "description": "Size of RenameTableModel pool in SqlParser."
  },
  "cairo.sql.with.clause.model.pool.capacity": {
    "default": "128",
    "description": "Size of WithClauseModel pool in SqlParser."
  },
  "cairo.sql.insert.model.pool.capacity": {
    "default": "64",
    "description": "Size of InsertModel pool in SqlParser."
  },
  "cairo.sql.insert.model.batch.size": {
    "default": "1000000",
    "description": "Batch size for non-atomic INSERT INTO SELECT statements."
  },
  "cairo.sql.copy.model.pool.capacity": {
    "default": "32",
    "description": "Size of CopyModel pool in SqlParser."
  },
  "cairo.sql.copy.buffer.size": {
    "default": "2M",
    "description": "Size of buffer used when copying tables."
  },
  "cairo.sql.double.cast.scale": {
    "default": "12",
    "description": "Maximum number of decimal places that types cast as doubles have."
  },
  "cairo.sql.float.cast.scale": {
    "default": "4",
    "description": "Maximum number of decimal places that types cast as floats have."
  },
  "cairo.sql.copy.formats.file": {
    "default": "/text_loader.json",
    "description": "Name of file with user's set of date and timestamp formats."
  },
  "cairo.sql.jit.mode": {
    "default": "on",
    "description": "JIT compilation for SQL queries. May be disabled by setting this value to `off`."
  },
  "cairo.sql.jit.debug.enabled": {
    "default": "false",
    "description": "Sets debug flag for JIT compilation. When enabled, assembly will be printed into `stdout`."
  },
  "cairo.sql.jit.max.in.list.size.threshold": {
    "default": "10",
    "description": "Controls whether or not JIT compilation will be used for a query that uses the IN predicate. If the IN list is longer than this threshold, JIT compilation will be cancelled."
  },
  "cairo.sql.jit.bind.vars.memory.page.size": {
    "default": "4K",
    "description": "Sets the memory page size for storing bind variable values for JIT compiled filter."
  },
  "cairo.sql.jit.bind.vars.memory.max.pages": {
    "default": "8",
    "description": "Sets the max memory pages for storing bind variable values for JIT compiled filter."
  },
  "cairo.sql.jit.page.address.cache.threshold": {
    "default": "1M",
    "description": "Sets minimum cache size to shrink page address cache after query execution."
  },
  "cairo.sql.jit.ir.memory.page.size": {
    "default": "8K",
    "description": "Sets the memory page size for storing IR for JIT compilation."
  },
  "cairo.sql.jit.ir.memory.max.pages": {
    "default": "8",
    "description": "Sets max memory pages for storing IR for JIT compilation."
  },
  "cairo.sql.page.frame.min.rows": {
    "default": "1000",
    "description": "Sets the minimum number of rows in page frames used in SQL queries."
  },
  "cairo.sql.page.frame.max.rows": {
    "default": "1000000",
    "description": "Sets the maximum number of rows in page frames used in SQL. queries"
  },
  "cairo.sql.sampleby.page.size": {
    "default": "0",
    "description": "SampleBy index query page size. Max values returned in single scan. 0 is default, and it means to use symbol block capacity."
  },
  "cairo.sql.sampleby.default.alignment.calendar": {
    "default": "0",
    "description": "SampleBy default alignment behaviour. true corresponds to ALIGN TO CALENDAR, false corresponds to ALIGN TO FIRST OBSERVATION."
  },
  "cairo.date.locale": {
    "default": "en",
    "description": "The locale to handle date types."
  },
  "cairo.timestamp.locale": {
    "default": "en",
    "description": "The locale to handle timestamp types."
  },
  "cairo.o3.column.memory.size": {
    "default": "256k",
    "description": "Memory page size per column for O3 operations. Please be aware O3 will use 2x of the set value per column (therefore a default of 2x256kb)."
  },
  "cairo.writer.data.append.page.size": {
    "default": "16M",
    "description": "mmap sliding page size that table writer uses to append data for each column."
  },
  "cairo.writer.data.index.key.append.page.size": {
    "default": "512K",
    "description": "mmap page size for appending index key data; key data is number of distinct symbol values times 4 bytes."
  },
  "cairo.writer.data.index.value.append.page.size": {
    "default": "16M",
    "description": "mmap page size for appending value data."
  },
  "cairo.writer.misc.append.page.size": {
    "default": "4K",
    "description": "mmap page size for mapping small files, default value is OS page size (4k Linux, 64K windows, 16k OSX M1). Overriding this rounds to the nearest (greater) multiple of the OS page size."
  },
  "cairo.writer.command.queue.capacity": {
    "default": "32",
    "description": "Maximum writer ALTER TABLE and replication command capacity. Shared between all the tables."
  },
  "cairo.writer.tick.rows.count": {
    "default": "1024",
    "description": "Row count to check writer command queue after on busy writing, e.g. tick after X rows written."
  },
  "cairo.writer.alter.busy.wait.timeout": {
    "default": "500",
    "description": "Maximum wait timeout in milliseconds for `ALTER TABLE` SQL statement run via REST and PostgreSQL Wire Protocol interfaces when statement execution is `ASYNCHRONOUS`."
  },
  "cairo.sql.column.purge.queue.capacity": {
    "default": "128",
    "description": "Purge column version job queue. Increase the size if column version not automatically cleanup after execution of UPDATE SQL statement. Reduce to decrease initial memory footprint."
  },
  "cairo.sql.column.purge.task.pool.capacity": {
    "default": "256",
    "description": "Column version task object pool capacity. Increase to reduce GC, reduce to decrease memory footprint."
  },
  "cairo.sql.column.purge.retry.delay": {
    "default": "10000",
    "description": "Initial delay (μs) before re-trying purge of stale column files."
  },
  "cairo.sql.column.purge.retry.delay.multiplier": {
    "default": "10.0",
    "description": "Multiplier used to increases retry delay with each iteration."
  },
  "cairo.sql.column.purge.retry.delay.limit": {
    "default": "60000000",
    "description": "Delay limit (μs), upon reaching which, the re-try delay remains constant."
  },
  "cairo.sql.column.purge.retry.limit.days": {
    "default": "31",
    "description": "Number of days purge system will continue to re-try deleting stale column files before giving up."
  },
  "cairo.volumes": {
    "default": "-",
    "description": "A comma separated list of _alias -> root-path_ pairs defining allowed volumes to be used in [CREATE TABLE IN VOLUME](/docs/reference/sql/create-table/#table-target-volume) statements."
  },
  "cairo.system.table.prefix": {
    "default": "sys.",
    "description": "Prefix of the tables used for QuestDB internal data storage. These tables are hidden from QuestDB web console."
  },
  "cairo.wal.enabled.default": {
    "default": "true",
    "description": "Setting defining whether WAL table is the default when using `CREATE TABLE`."
  },
  "cairo.o3.partition.split.min.size": {
    "default": "50MB",
    "description": "The estimated partition size on disk. This setting is one of the conditions to trigger [auto-partitioning](/docs/operations/capacity-planning/#auto-partitioning)."
  },
  "cairo.o3.last.partition.max.splits": {
    "default": "20",
    "description": "The number of partition pieces allowed before the last partition piece is merged back to the physical partition."
  },
  "cairo.o3.partition.purge.list.initial.capacity": {
    "default": "1",
    "description": "Number of partition expected on average. Initial value for purge allocation job, extended in runtime automatically."
  },
  "cairo.sql.parallel.groupby.enabled": {
    "default": "true",
    "description": "Enables parallel GROUP BY execution; requires at least 4 shared worker threads."
  },
  "cairo.sql.parallel.groupby.merge.shard.queue.capacity": {
    "default": "<auto>",
    "description": "Merge queue capacity for parallel GROUP BY; used for parallel tasks that merge shard hash tables."
  },
  "cairo.sql.parallel.groupby.sharding.threshold": {
    "default": "100000",
    "description": "Threshold for parallel GROUP BY to shard the hash table holding the aggregates."
  },
  "cairo.sql.groupby.allocator.default.chunk.size": {
    "default": "128k",
    "description": "Default size for memory buffers in GROUP BY function native memory allocator."
  },
  "cairo.sql.groupby.allocator.max.chunk.size": {
    "default": "4gb",
    "description": "Maximum allowed native memory allocation for GROUP BY functions."
  },
  "cairo.sql.unordered.map.max.entry.size": {
    "default": "24",
    "description": "Threshold in bytes for switching from single memory buffer hash table (unordered) to a hash table with separate heap for entries (ordered)."
  },
  "cairo.sql.window.max.recursion": {
    "default": "128",
    "description": "Prevents stack overflow errors when evaluating complex nested SQLs. The value is an approximate number of nested SELECT clauses."
  },
  "cairo.sql.query.registry.pool.size": {
    "default": "<auto>",
    "description": "Pre-sizes the internal data structure that stores active query executions. The value is chosen automatically based on the number of threads in the shared worker pool."
  },
  "cairo.sql.analytic.initial.range.buffer.size": {
    "default": "32",
    "description": "Window function buffer size in record counts. Pre-sizes buffer for every windows function execution to contain window records."
  },
  "cairo.system.writer.data.append.page.size": {
    "default": "256k",
    "description": "mmap sliding page size that TableWriter uses to append data for each column specifically for System tables."
  },
  "cairo.file.descriptor.cache.enabled": {
    "default": "true",
    "description": "enables or disables the file-descriptor cache"
  },
  "cairo.partition.encoder.parquet.raw.array.encoding.enabled": {
    "default": "false",
    "description": "determines whether to export arrays in QuestDB-native binary format (true, less compatible) or Parquet-native format (false, more compatible)."
  },
  "cairo.partition.encoder.parquet.version": {
    "default": "1",
    "description": "Output parquet version to use for parquet-encoded partitions. Can be 1 or 2."
  },
  "cairo.partition.encoder.parquet.statistics.enabled": {
    "default": "true",
    "description": "Controls whether or not statistics are included in parquet-encoded partitions."
  },
  "cairo.partition.encoder.parquet.compression.codec": {
    "default": "ZSTD",
    "description": "Sets the default compression codec for parquet-encoded partitions. Alternatives include `LZ4_RAW`, `SNAPPY`."
  },
  "cairo.partition.encoder.parquet.compression.level": {
    "default": "9 (ZSTD), 0 (otherwise)",
    "description": "Sets the default compression level for parquet-encoded partitions. Dependent on underlying compression codec."
  },
  "cairo.partition.encoder.parquet.row.group.size": {
    "default": "100000",
    "description": "Sets the default row-group size for parquet-encoded partitions."
  },
  "cairo.partition.encoder.parquet.data.page.size": {
    "default": "1048576",
    "description": "Sets the default page size for parquet-encoded partitions."
  }
}
